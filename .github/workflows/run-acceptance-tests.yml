# WARNING: This file is autogenerated - changes will be overwritten if not made via https://github.com/pulumi/ci-mgmt

name: run-acceptance-tests

on:
  pull_request:
    paths-ignore:
    - CHANGELOG.md
  repository_dispatch:
    types:
    - run-acceptance-tests-command

env:
  PR_COMMIT_SHA: ${{ github.event.client_payload.pull_request.head.sha }}
  ALT_AWS_ACCESS_KEY_ID: ${{ secrets.ALT_AWS_ACCESS_KEY_ID }}
  ALT_AWS_SECRET_ACCESS_KEY: ${{ secrets.ALT_AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-west-2
  GITHUB_TOKEN: ${{ secrets.PULUMI_BOT_TOKEN }}
  GOLANGCI_LINT_VERSION: v1.61.0
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  NUGET_PUBLISH_KEY: ${{ secrets.NUGET_PUBLISH_KEY }}
  PROVIDER: eks
  PUBLISH_REPO_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
  PUBLISH_REPO_USERNAME: ${{ secrets.OSSRH_USERNAME }}
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  PULUMI_API: https://api.pulumi-staging.io
  PULUMI_ENABLE_RESOURCE_REFERENCES: "1"
  PULUMI_GO_DEP_ROOT: ${{ github.workspace }}/..
  PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
  PYPI_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  PYPI_USERNAME: __token__
  SIGNING_KEY: ${{ secrets.JAVA_SIGNING_KEY }}
  SIGNING_KEY_ID: ${{ secrets.JAVA_SIGNING_KEY_ID }}
  SIGNING_PASSWORD: ${{ secrets.JAVA_SIGNING_PASSWORD }}
<<<<<<< HEAD
  PULUMI_ENABLE_RESOURCE_REFERENCES: 1
  PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
  GOVERSION: "1.21.x"
  DOTNETVERSION: "6.x"
  PYTHONVERSION: "3.12"
  JAVAVERSION: "11"
=======
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  TF_APPEND_USER_AGENT: pulumi

# This should cancel any previous runs of the same workflow on the same branch which are still running.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

>>>>>>> a2a9a33 (reset to latest head)
jobs:
  prerequisites:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      pull-requests: write
    uses: ./.github/workflows/prerequisites.yml
    secrets: inherit
    with:
      default_branch: ${{ github.event.repository.default_branch }}
      is_pr: ${{ github.event_name == 'pull_request' }}
      is_automated: ${{ github.actor == 'dependabot[bot]' }}

  build_provider:
    uses: ./.github/workflows/build_provider.yml
    needs: prerequisites
    secrets: inherit
    with:
      version: ${{ needs.prerequisites.outputs.version }}

  build_sdk:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: build_sdk
    needs: prerequisites
    uses: ./.github/workflows/build_sdk.yml
    secrets: inherit
    with:
      version: ${{ needs.prerequisites.outputs.version }}

  comment-notification:
    if: github.event_name == 'repository_dispatch'
    name: comment-notification
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
    - id: run-url
      name: Create URL to the run output
      run: echo "run-url=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> "$GITHUB_OUTPUT"
    - name: Update with Result
      uses: peter-evans/create-or-update-comment@v1
      with:
        body: "Please view the PR build: ${{ steps.run-url.outputs.run-url }}"
        issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
        repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
        token: ${{ secrets.GITHUB_TOKEN }}
  lint:
<<<<<<< HEAD
    name: Lint and unit test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: https://registry.npmjs.org
      - name: Install Yarn
        run: curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.22.22
      - name: Update PATH for Yarn
        run: |
          echo "$HOME/.yarn/bin" >> "$GITHUB_PATH"
          echo "$HOME/.config/yarn/global/node_modules/.bin" >> "$GITHUB_PATH"
      - name: Run nodejs linter
        run: make lint
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: -c ../.golangci.yml
          working-directory: provider
      - name: Run unit tests
        run: make test_unit_tests
  prerequisites:
    name: prerequisites
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    outputs:
      version: ${{ steps.provider-version.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - uses: pulumi/provider-version-action@0391d47b9b0d865d33dd0a295b1fcf9f7021dd4c # v1.5.3
        id: provider-version
        with:
          set-env: "PROVIDER_VERSION"
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Install Schema Tools
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/schema-tools
      - name: Install Pulumi CLI
        uses: pulumi/actions@c7fad9e2f0b79653172b36538b8b34b3c0291952 # v6
      - name: Build provider binary + schema
        run: make schema provider
      - name: Check Schema is Valid
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          {
            echo "SCHEMA_CHANGES<<$EOF"
            schema-tools compare -p eks -o ${{ github.base_ref || 'master' }} -n --local-path=provider/cmd/pulumi-resource-eks/schema.json
            echo "$EOF"
          } >> "$GITHUB_ENV"
      - if: github.event_name == 'pull_request'
        name: Comment on PR with Details of Schema Check
        uses: thollander/actions-comment-pull-request@v2
        with:
          comment_tag: schemaCheck
          message: |
            ${{ env.SCHEMA_CHANGES }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check worktree clean
        uses: pulumi/git-status-check-action@v1
        with:
          allowed-changes: |
            sdk/**/pulumi-plugin.json
            sdk/dotnet/Pulumi.*.csproj
            sdk/go/**/pulumiUtilities.go
            sdk/nodejs/package.json
            sdk/python/pyproject.toml
      - name: Tar provider binaries
        run:
          tar -zcf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin/ pulumi-resource-${{ env.PROVIDER }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin/provider.tar.gz
    strategy:
      fail-fast: true
  build_sdk:
    name: Build ${{ matrix.language }} SDK
    runs-on: ubuntu-latest
    needs: prerequisites
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    env:
      PROVIDER_VERSION: ${{ needs.prerequisites.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@c7fad9e2f0b79653172b36538b8b34b3c0291952 # v6
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Setup DotNet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: https://registry.npmjs.org
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          cache: gradle
          distribution: temurin
          java-version: ${{ env.JAVAVERSION }}
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3.5.0
        with:
          gradle-version: "7.6"
      - name: Install Yarn
        run: curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.22.22
      - name: Update PATH for Yarn
        run: |
          echo "$HOME/.yarn/bin" >> "$GITHUB_PATH"
          echo "$HOME/.config/yarn/global/node_modules/.bin" >> "$GITHUB_PATH"
      - name: Build SDK
        run: make build_${{ matrix.language }}
      - name: Check worktree clean
        uses: pulumi/git-status-check-action@v1
        with:
          allowed-changes: |
            sdk/**/pulumi-plugin.json
            sdk/dotnet/Pulumi.*.csproj
            sdk/go/**/pulumiUtilities.go
            sdk/nodejs/package.json
            sdk/python/pyproject.toml
      - name: Compress ${{ matrix.language }} SDK folder
        run: tar -zcf sdk/${{ matrix.language }}.tar.gz -C sdk/${{ matrix.language }}/ .
      - name: Upload ${{ matrix.language }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.language  }}-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/${{ matrix.language }}.tar.gz
    strategy:
      fail-fast: true
      matrix:
        language:
          - nodejs
          - python
          - dotnet
          - go
          - java
  test-nodejs-upgrade:
    name: Run NodeJS Upgrade Tests
    needs:
      - prerequisites
      - build_sdk
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    env:
      PROVIDER_VERSION: ${{ needs.prerequisites.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install Kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv kubectl /usr/local/bin
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Install awscli
        run: |
          python -m pip install --upgrade pip
          pip install awscli --upgrade
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@b374ceb6168550de27c6eba92e01c1a774040e11 # v2.0.0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: https://registry.npmjs.org
      - name: Download provider binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run: tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace }}/bin
      - name: Restore binary perms
        run:
          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;
      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
      - name: Download SDK
        uses: actions/download-artifact@v4
        with:
          name: nodejs-sdk.tar.gz
          path: ${{ github.workspace}}
      - name: Uncompress SDK folder
        run: tar -zxf ${{ github.workspace}}/nodejs.tar.gz -C ${{github.workspace}}/nodejs
      - name: Install dependencies
        run: make install_nodejs_sdk
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 7200
          role-session-name: ${{ env.PROVIDER }}@githubActions
          role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
      - name: Clear GitHub Actions Ubuntu runner disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          dotnet: false
          android: true
          haskell: true
          swap-storage: true
          large-packages: false
      - name: Link nodejs binary for testing
        run: |
          cd ${{ github.workspace }}/bin
          yarn install && yarn link @pulumi/eks
      - name: Run upgrade tests
        run: make test_nodejs_upgrade
=======
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: lint
    uses: ./.github/workflows/lint.yml
    secrets: inherit
  test:
    uses: ./.github/workflows/test.yml
    needs:
      - prerequisites
      - build_sdk
    secrets: inherit
    with:
      version: ${{ needs.prerequisites.outputs.version }}
>>>>>>> a2a9a33 (reset to latest head)

  sentinel:
    name: sentinel
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      statuses: write
    needs:
    - test
    - build_provider
    - license_check
    - lint
    runs-on: ubuntu-latest
    steps:
<<<<<<< HEAD
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install Kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv kubectl /usr/local/bin
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Install awscli
        run: |
          python -m pip install --upgrade pip
          pip install awscli --upgrade
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@c7fad9e2f0b79653172b36538b8b34b3c0291952 # v6
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: https://registry.npmjs.org
      - name: Download provider binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run:
          tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin
      - name: Restore binary perms
        run:
          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;
      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
      - name: Download SDK
        uses: actions/download-artifact@v4
        with:
          name: nodejs-sdk.tar.gz
          path: ${{ github.workspace}}
      - name: Uncompress SDK folder
        run: tar -zxf ${{ github.workspace}}/nodejs.tar.gz -C ${{github.workspace}}/nodejs
      - name: Install dependencies
        run: make install_nodejs_sdk
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 7200
          role-session-name: ${{ env.PROVIDER }}@githubActions
          role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
      - name: Link nodejs binary for testing
        run: |
          cd ${{ github.workspace }}/bin
          yarn install && yarn link @pulumi/eks
      - name: Generate go test Slice
        id: test_split
        uses: hashicorp-forge/go-test-split-action@v2.0.0
        with:
          working-directory: tests
          flags: -tags=nodejs
          total: ${{ matrix.total }}
          index: ${{ matrix.index }}
      - name: Run tests
        run: cd tests && go test -tags=nodejs -count=1 -cover -timeout 3h -parallel 6 . --run="${{ steps.test_split.outputs.run}}"
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        total: [15]
        index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
  test-python:
    name: Run Python Tests
    needs:
      - prerequisites
      - build_sdk
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    env:
      PROVIDER_VERSION: ${{ needs.prerequisites.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@c7fad9e2f0b79653172b36538b8b34b3c0291952 # v6
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: https://registry.npmjs.org
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Install awscli
        run: |
          python -m pip install --upgrade pip
          pip install awscli --upgrade
      - name: Install Python deps
        run: |-
          pip3 install virtualenv==20.0.23
          pip3 install pipenv
      - name: Download provider binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run:
          tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin
      - name: Restore binary perms
        run:
          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;
      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
      - name: Download NodeJS SDK
        uses: actions/download-artifact@v4
        with:
          name: nodejs-sdk.tar.gz
          path: ${{ github.workspace}}
      - name: Uncompress NodeJS SDK folder
        run: tar -zxf ${{ github.workspace}}/nodejs.tar.gz -C ${{github.workspace}}/nodejs
      - name: Install NodeJS SDK
        run: make install_nodejs_sdk
      - name: Download Python SDK
        uses: actions/download-artifact@v4
        with:
          name: python-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/
      - name: Uncompress Python SDK folder
        run: tar -zxf ${{ github.workspace}}/sdk/python.tar.gz -C ${{github.workspace}}/sdk/python
      - name: Install dependencies
        run: make install_python_sdk
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 7200
          role-session-name: ${{ env.PROVIDER }}@githubActions
          role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
      - name: Link nodejs binary for testing
        run: |
          cd ${{ github.workspace }}/bin
          yarn install && yarn link @pulumi/eks
      - name: Generate go test Slice
        id: test_split
        uses: hashicorp-forge/go-test-split-action@v2.0.0
        with:
          working-directory: tests
          flags: -tags=python
          total: ${{ matrix.total }}
          index: ${{ matrix.index }}
      - name: Run tests
        run: cd tests && go test -tags=python -count=1 -cover -timeout 3h -parallel 6 . --run="${{ steps.test_split.outputs.run}}"
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        total: [6]
        index: [0, 1, 2, 3, 4, 5]
  test-dotnet:
    name: Run DotNet Tests
    needs:
      - prerequisites
      - build_sdk
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    env:
      PROVIDER_VERSION: ${{ needs.prerequisites.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@c7fad9e2f0b79653172b36538b8b34b3c0291952 # v6
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Install awscli
        run: |
          python -m pip install --upgrade pip
          pip install awscli --upgrade
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: https://registry.npmjs.org
      - name: Setup DotNet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}
      - name: Download provider binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run:
          tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin
      - name: Restore binary perms
        run:
          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;
      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
      - name: Download NodeJS SDK
        uses: actions/download-artifact@v4
        with:
          name: nodejs-sdk.tar.gz
          path: ${{ github.workspace}}
      - name: Uncompress NodeJS SDK folder
        run: tar -zxf ${{ github.workspace}}/nodejs.tar.gz -C ${{github.workspace}}/nodejs
      - name: Install NodeJS SDK
        run: make install_nodejs_sdk
      - name: Download DotNet SDK
        uses: actions/download-artifact@v4
        with:
          name: dotnet-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/
      - name: Uncompress DotNet SDK folder
        run: tar -zxf ${{ github.workspace}}/sdk/dotnet.tar.gz -C ${{github.workspace}}/sdk/dotnet
      - name: Install dependencies
        run: make install_dotnet_sdk
      - run: dotnet nuget add source ${{ github.workspace }}/nuget
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 7200
          role-session-name: ${{ env.PROVIDER }}@githubActions
          role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
      - name: Link nodejs binary for testing
        run: |
          cd ${{ github.workspace }}/bin
          yarn install && yarn link @pulumi/eks
      - name: Run tests
        run: cd tests && go test -tags=dotnet -count=1 -cover -timeout 3h -parallel 6 .
  test-go:
    name: Run Go Tests
    needs:
      - prerequisites
      - build_sdk
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    env:
      PROVIDER_VERSION: ${{ needs.prerequisites.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@c7fad9e2f0b79653172b36538b8b34b3c0291952 # v6
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: https://registry.npmjs.org
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Install awscli
        run: |
          python -m pip install --upgrade pip
          pip install awscli --upgrade
      - name: Setup DotNet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}
      - name: Download provider binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run:
          tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin
      - name: Restore binary perms
        run:
          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;
      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
      - name: Download NodeJS SDK
        uses: actions/download-artifact@v4
        with:
          name: nodejs-sdk.tar.gz
          path: ${{ github.workspace}}
      - name: Uncompress NodeJS SDK folder
        run: tar -zxf ${{ github.workspace}}/nodejs.tar.gz -C ${{github.workspace}}/nodejs
      - name: Install NodeJS SDK
        run: make install_nodejs_sdk
      - name: Download Go SDK
        uses: actions/download-artifact@v4
        with:
          name: go-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/
      - name: Uncompress Go SDK folder
        run: tar -zxf ${{ github.workspace}}/sdk/go.tar.gz -C ${{github.workspace}}/sdk/go
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 7200
          role-session-name: ${{ env.PROVIDER }}@githubActions
          role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
      - name: Link nodejs binary for testing
        run: |
          cd ${{ github.workspace }}/bin
          yarn install && yarn link @pulumi/eks
      - name: Run tests
        run: cd tests && go test -tags=go -count=1 -cover -timeout 3h -parallel 6 .
=======
    - uses: guibranco/github-status-action-v2@0849440ec82c5fa69b2377725b9b7852a3977e76
      with:
        authToken: ${{secrets.GITHUB_TOKEN}}
        # Write an explicit status check called "Sentinel" which will only pass if this code really runs.
        # This should always be a required check for PRs.
        context: 'Sentinel'
        description: 'All required checks passed'
        state: 'success'
        # Write to the PR commit SHA if it's available as we don't want the merge commit sha,
        # otherwise use the current SHA for any other type of build.
        sha: ${{ github.event.pull_request.head.sha || github.sha }}

  license_check:
    name: License Check
    uses: ./.github/workflows/license.yml
    secrets: inherit
>>>>>>> a2a9a33 (reset to latest head)
