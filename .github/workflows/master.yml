# WARNING: This file is autogenerated - changes will be overwritten if not made via https://github.com/pulumi/ci-mgmt

env:
  ALT_AWS_ACCESS_KEY_ID: ${{ secrets.ALT_AWS_ACCESS_KEY_ID }}
  ALT_AWS_SECRET_ACCESS_KEY: ${{ secrets.ALT_AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-west-2
  GITHUB_TOKEN: ${{ secrets.PULUMI_BOT_TOKEN }}
  GOLANGCI_LINT_VERSION: v1.61.0
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  NUGET_PUBLISH_KEY: ${{ secrets.NUGET_PUBLISH_KEY }}
  PROVIDER: eks
  PUBLISH_REPO_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
  PUBLISH_REPO_USERNAME: ${{ secrets.OSSRH_USERNAME }}
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  PULUMI_API: https://api.pulumi-staging.io
  PULUMI_ENABLE_RESOURCE_REFERENCES: "1"
  PULUMI_GO_DEP_ROOT: ${{ github.workspace }}/..
  PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
  PYPI_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  PYPI_USERNAME: __token__
  SIGNING_KEY: ${{ secrets.JAVA_SIGNING_KEY }}
  SIGNING_KEY_ID: ${{ secrets.JAVA_SIGNING_KEY_ID }}
  SIGNING_PASSWORD: ${{ secrets.JAVA_SIGNING_PASSWORD }}
<<<<<<< HEAD
  PULUMI_ENABLE_RESOURCE_REFERENCES: 1
  PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
  GOVERSION: "1.21.x"
  DOTNETVERSION: "6.x"
  PYTHONVERSION: "3.12"
  JAVAVERSION: "11"
=======
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  TF_APPEND_USER_AGENT: pulumi
>>>>>>> a2a9a33 (reset to latest head)
jobs:
  prerequisites:
<<<<<<< HEAD
    name: prerequisites
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.provider-version.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - uses: pulumi/provider-version-action@0391d47b9b0d865d33dd0a295b1fcf9f7021dd4c # v1.5.3
        id: provider-version
        with:
          set-env: "PROVIDER_VERSION"
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@c7fad9e2f0b79653172b36538b8b34b3c0291952 # v6
      - name: Build provider binary + schema
        run: make schema provider
      - name: Check worktree clean
        uses: pulumi/git-status-check-action@v1
        with:
          allowed-changes: |
            sdk/**/pulumi-plugin.json
            sdk/dotnet/Pulumi.*.csproj
            sdk/go/**/pulumiUtilities.go
            sdk/nodejs/package.json
            sdk/python/pyproject.toml
      - name: Tar provider binaries
        run:
          tar -zcf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin/ pulumi-resource-${{ env.PROVIDER }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin/provider.tar.gz
      - if: failure() && github.event_name == 'push'
        name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          author_name: Failure in building provider prerequisites
          fields: repo,commit,author,action
          status: ${{ job.status }}
    strategy:
      fail-fast: true
=======
    uses: ./.github/workflows/prerequisites.yml
    secrets: inherit
    with:
      default_branch: ${{ github.event.repository.default_branch }}
      is_pr: ${{ github.event_name == 'pull_request' }}
      is_automated: ${{ github.actor == 'dependabot[bot]' }}

  build_provider:
    uses: ./.github/workflows/build_provider.yml
    needs: prerequisites
    secrets: inherit
    with:
      version: ${{ needs.prerequisites.outputs.version }}

>>>>>>> a2a9a33 (reset to latest head)
  build_sdk:
    name: build_sdk
    needs: prerequisites
<<<<<<< HEAD
    env:
      PROVIDER_VERSION: ${{ needs.prerequisites.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@c7fad9e2f0b79653172b36538b8b34b3c0291952 # v6
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Setup DotNet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: https://registry.npmjs.org
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          cache: gradle
          distribution: temurin
          java-version: ${{ env.JAVAVERSION }}
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3.5.0
        with:
          gradle-version: "7.6"
      - name: Install Yarn
        run: curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.22.22
      - name: Update PATH for Yarn
        run: |
          echo "$HOME/.yarn/bin" >> "$GITHUB_PATH"
          echo "$HOME/.config/yarn/global/node_modules/.bin" >> "$GITHUB_PATH"
      - name: Build SDK
        run: make build_${{ matrix.language }}
      - name: Check worktree clean
        uses: pulumi/git-status-check-action@v1
        with:
          allowed-changes: |
            sdk/**/pulumi-plugin.json
            sdk/dotnet/Pulumi.*.csproj
            sdk/go/**/pulumiUtilities.go
            sdk/nodejs/package.json
            sdk/python/pyproject.toml
      - name: Compress ${{ matrix.language }} SDK folder
        run: tar -zcf sdk/${{ matrix.language }}.tar.gz -C sdk/${{ matrix.language }}/ .
      - name: Upload ${{ matrix.language }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.language  }}-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/${{ matrix.language }}.tar.gz
    strategy:
      fail-fast: true
      matrix:
        language:
          - nodejs
          - python
          - dotnet
          - java
          - go
=======
    uses: ./.github/workflows/build_sdk.yml
    secrets: inherit
    with:
      version: ${{ needs.prerequisites.outputs.version }}

  lint:
    name: lint
    uses: ./.github/workflows/lint.yml
    secrets: inherit
  license_check:
    name: License Check
    uses: ./.github/workflows/license.yml
    secrets: inherit
>>>>>>> a2a9a33 (reset to latest head)

  publish:
    name: publish
    permissions:
      contents: write
    needs:
      - prerequisites
      - build_provider
      - test
      - license_check
    uses: ./.github/workflows/publish.yml
    secrets: inherit
    with:
      version: ${{ needs.prerequisites.outputs.version }}
      isPrerelease: true
      skipGoSdk: true

  tag_release_if_labeled_needs_release:
    name: Tag release if labeled as needs-release
    needs: publish
    runs-on: ubuntu-latest
    steps:
    - name: check if this commit needs release
      if: ${{ env.RELEASE_BOT_ENDPOINT != '' }}
      uses: pulumi/action-release-by-pr-label@main
      with:
        command: "release-if-needed"
        repo: ${{ github.repository }}
        commit: ${{ github.sha }}
        slack_channel: ${{ secrets.RELEASE_OPS_SLACK_CHANNEL }}
      env:
        RELEASE_BOT_ENDPOINT: ${{ secrets.RELEASE_BOT_ENDPOINT }}
        RELEASE_BOT_KEY: ${{ secrets.RELEASE_BOT_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    uses: ./.github/workflows/test.yml
    needs:
      - prerequisites
      - build_sdk
<<<<<<< HEAD
    runs-on: ubuntu-latest
    env:
      PROVIDER_VERSION: ${{ needs.prerequisites.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Install awscli
        run: |
          python -m pip install --upgrade pip
          pip install awscli --upgrade
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@c7fad9e2f0b79653172b36538b8b34b3c0291952 # v6
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: https://registry.npmjs.org
      - name: Download provider binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run:
          tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin
      - name: Restore binary perms
        run:
          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;
      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
      - name: Download SDK
        uses: actions/download-artifact@v4
        with:
          name: nodejs-sdk.tar.gz
          path: ${{ github.workspace}}
      - name: Uncompress SDK folder
        run: tar -zxf ${{ github.workspace}}/nodejs.tar.gz -C ${{github.workspace}}/nodejs
      - name: Install dependencies
        run: make install_nodejs_sdk
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 7200
          role-session-name: ${{ env.PROVIDER }}@githubActions
          role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
      - name: Link nodejs binary for testing
        run: |
          cd ${{ github.workspace }}/bin
          yarn install && yarn link @pulumi/eks
      - name: Generate go test Slice
        id: test_split
        uses: hashicorp-forge/go-test-split-action@v2.0.0
        with:
          working-directory: tests
          flags: -tags=nodejs
          total: ${{ matrix.total }}
          index: ${{ matrix.index }}
      - name: Run tests
        run: cd tests && go test -tags=nodejs -count=1 -cover -timeout 3h -parallel 6 . --run="${{ steps.test_split.outputs.run}}" 2>&1
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        total: [15]
        index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
  test-python:
    name: Run Python Tests
    needs:
      - prerequisites
      - build_sdk
    runs-on: ubuntu-latest
    env:
      PROVIDER_VERSION: ${{ needs.prerequisites.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Install awscli
        run: |
          python -m pip install --upgrade pip
          pip install awscli --upgrade
      - name: Install Pulumi CLI
        uses: pulumi/actions@c7fad9e2f0b79653172b36538b8b34b3c0291952 # v6
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: https://registry.npmjs.org
      - name: Install Python deps
        run: |-
          pip3 install virtualenv==20.0.23
          pip3 install pipenv
      - name: Download provider binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run:
          tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin
      - name: Restore binary perms
        run:
          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;
      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
      - name: Download NodeJS SDK
        uses: actions/download-artifact@v4
        with:
          name: nodejs-sdk.tar.gz
          path: ${{ github.workspace}}
      - name: Uncompress NodeJS SDK folder
        run: tar -zxf ${{ github.workspace}}/nodejs.tar.gz -C ${{github.workspace}}/nodejs
      - name: Install NodeJS SDK
        run: make install_nodejs_sdk
      - name: Download Python SDK
        uses: actions/download-artifact@v4
        with:
          name: python-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/
      - name: Uncompress Python SDK folder
        run: tar -zxf ${{ github.workspace}}/sdk/python.tar.gz -C ${{github.workspace}}/sdk/python
      - name: Install dependencies
        run: make install_python_sdk
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 7200
          role-session-name: ${{ env.PROVIDER }}@githubActions
          role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
      - name: Link nodejs binary for testing
        run: |
          cd ${{ github.workspace }}/bin
          yarn install && yarn link @pulumi/eks
      - name: Generate go test Slice
        id: test_split
        uses: hashicorp-forge/go-test-split-action@v2.0.0
        with:
          working-directory: tests
          flags: -tags=python
          total: ${{ matrix.total }}
          index: ${{ matrix.index }}
      - name: Run tests
        run: cd tests && go test -tags=python -count=1 -cover -timeout 3h -parallel 6 . --run="${{ steps.test_split.outputs.run}}"
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        total: [6]
        index: [0, 1, 2, 3, 4, 5]
  test-dotnet:
    name: Run DotNet Tests
    needs:
      - prerequisites
      - build_sdk
    runs-on: ubuntu-latest
    env:
      PROVIDER_VERSION: ${{ needs.prerequisites.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Install awscli
        run: |
          python -m pip install --upgrade pip
          pip install awscli --upgrade
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@c7fad9e2f0b79653172b36538b8b34b3c0291952 # v6
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: https://registry.npmjs.org
      - name: Setup DotNet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}
      - name: Download provider binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run:
          tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin
      - name: Restore binary perms
        run:
          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;
      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
      - name: Download NodeJS SDK
        uses: actions/download-artifact@v4
        with:
          name: nodejs-sdk.tar.gz
          path: ${{ github.workspace}}
      - name: Uncompress NodeJS SDK folder
        run: tar -zxf ${{ github.workspace}}/nodejs.tar.gz -C ${{github.workspace}}/nodejs
      - name: Install NodeJS SDK
        run: make install_nodejs_sdk
      - name: Download DotNet SDK
        uses: actions/download-artifact@v4
        with:
          name: dotnet-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/
      - name: Uncompress DotNet SDK folder
        run: tar -zxf ${{ github.workspace}}/sdk/dotnet.tar.gz -C ${{github.workspace}}/sdk/dotnet
      - name: Install dependencies
        run: make install_dotnet_sdk
      - run: dotnet nuget add source ${{ github.workspace }}/nuget
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 7200
          role-session-name: ${{ env.PROVIDER }}@githubActions
          role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
      - name: Link nodejs binary for testing
        run: |
          cd ${{ github.workspace }}/bin
          yarn install && yarn link @pulumi/eks
      - name: Run tests
        run: cd tests && go test -tags=dotnet -count=1 -cover -timeout 3h -parallel 6 .
  test-go:
    name: Run Go Tests
    needs:
      - prerequisites
      - build_sdk
    runs-on: ubuntu-latest
    env:
      PROVIDER_VERSION: ${{ needs.prerequisites.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@c7fad9e2f0b79653172b36538b8b34b3c0291952 # v6
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: https://registry.npmjs.org
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Install awscli
        run: |
          python -m pip install --upgrade pip
          pip install awscli --upgrade
      - name: Setup DotNet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}
      - name: Download provider binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run:
          tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace
          }}/bin
      - name: Restore binary perms
        run:
          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;
      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
      - name: Download NodeJS SDK
        uses: actions/download-artifact@v4
        with:
          name: nodejs-sdk.tar.gz
          path: ${{ github.workspace}}
      - name: Uncompress NodeJS SDK folder
        run: tar -zxf ${{ github.workspace}}/nodejs.tar.gz -C ${{github.workspace}}/nodejs
      - name: Install NodeJS SDK
        run: make install_nodejs_sdk
      - name: Download Go SDK
        uses: actions/download-artifact@v4
        with:
          name: go-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/
      - name: Uncompress Go SDK folder
        run: tar -zxf ${{ github.workspace}}/sdk/go.tar.gz -C ${{github.workspace}}/sdk/go
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 7200
          role-session-name: ${{ env.PROVIDER }}@githubActions
          role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
      - name: Link nodejs binary for testing
        run: |
          cd ${{ github.workspace }}/bin
          yarn install && yarn link @pulumi/eks
      - name: Run tests
        run: cd tests && go test -tags=go -count=1 -cover -timeout 3h -parallel 6 .
=======
    secrets: inherit
    with:
      version: ${{ needs.prerequisites.outputs.version }}

>>>>>>> a2a9a33 (reset to latest head)
name: master
on:
  workflow_dispatch: {}
  push:
    branches:
    - master
    paths-ignore:
    - "**.md"
    tags-ignore:
    - v*
    - sdk/*
    - "**"
