name: "Verify Release"

on:
  workflow_dispatch:
    inputs:
      providerVersion:
        description: "The version of the provider to verify"
        required: true
        type: string
      enableMacRunner:
        description: "Enable the MacOS runner in addition to Linux and Windows. Defaults to 'false'."
        required: false
        type: boolean
      skipGoSdk:
        description: "Skip the Go SDK verification. Defaults to 'false'. Enable this when verifying a pre-release for which we don't publish the Go SDK (for PRs and the default branch)."
        required: false
        type: boolean
        default: false
      pythonVersion:
        description: "Optional python SDK version to verify. Defaults to inputs.providerVersion."
        type: string
        required: false
  workflow_call:
    inputs:
      providerVersion:
        description: "The version of the provider to verify"
        required: true
        type: string
      skipGoSdk:
        description: "Skip the Go SDK verification. Defaults to 'false'. This is used when we're not publishing a Go SDK on the default branch build."
        required: false
        type: boolean
        default: false
      pythonVersion:
        description: "Optional python SDK version to verify. Defaults to inputs.providerVersion."
        type: string
        required: false

env:
  AWS_REGION: us-west-2
  DOTNET_VERSION: 6.x
  GO_VERSION: 1.21.x
  GOLANGCI_LINT_VERSION: v1.64.8
  JAVA_VERSION: "11"
  NODE_VERSION: 20.x
  PROVIDER: eks
  PULUMI_API: https://api.pulumi-staging.io
  PULUMI_ENABLE_RESOURCE_REFERENCES: "1"
  PULUMI_GO_DEP_ROOT: ${{ github.workspace }}/..
  PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
  PYTHON_VERSION: "3.9"
  TF_APPEND_USER_AGENT: pulumi

jobs:
  verify-release:
    name: verify-release
    strategy:
      matrix:
        runner: ["ubuntu-latest", "windows-latest", "macos-latest"]
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Configure Git to checkout files with long names
        run: git config --global core.longpaths true
      - name: Checkout Repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false      
      - env:
          ESC_ACTION_ENVIRONMENT: github-secrets/${{ github.repository_owner }}-${{ github.event.repository.name }}
          ESC_ACTION_EXPORT_ENVIRONMENT_VARIABLES: "false"
          ESC_ACTION_OIDC_AUTH: "true"
          ESC_ACTION_OIDC_ORGANIZATION: pulumi
          ESC_ACTION_OIDC_REQUESTED_TOKEN_TYPE: urn:pulumi:token-type:access_token:organization
        id: esc-secrets
        name: Fetch secrets from ESC
        uses: pulumi/esc-action@9eb774255b1a4afb7855678ae8d4a77359da0d9b
      - name: Setup tools
        uses: ./.github/actions/setup-tools
        with:
          tools: pulumicli, nodejs, python, dotnet, go, java
      - name: Generate Pulumi Access Token
        id: generate_pulumi_token
        uses: pulumi/auth-actions@1c89817aab0c66407723cdef72b05266e7376640 # v1.0.1
        with:
          organization: pulumi
          requested-token-type: urn:pulumi:token-type:access_token:organization
          export-environment-variables: false
      # workaround for https://github.com/pulumi/esc-action/issues/10
      - name: Install esc on Windows
        if: ${{ matrix.runner == 'windows-latest' }}
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          iex ((New-Object System.Net.WebClient).DownloadString('https://get.pulumi.com/esc/install.ps1'))
          Copy-Item "$env:USERPROFILE\.pulumi\bin\esc.exe" "C:\Windows\System32\esc.exe"
      - name: Export AWS Credentials
        uses: pulumi/esc-action@efb0bc8946938f0dfbfa00e829196ec95f0d0ea7 # v1.4.0
        env:
          PULUMI_ACCESS_TOKEN: ${{ steps.generate_pulumi_token.outputs.pulumi-access-token }}
        with:
          environment: logins/pulumi-ci
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ steps.esc-secrets.outputs.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ steps.esc-secrets.outputs.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 7200
          role-session-name: aws@githubActions
          role-to-assume: ${{ steps.esc-secrets.outputs.AWS_CI_ROLE_ARN }}
      - name: Verify nodejs release
        uses: pulumi/verify-provider-release@679d5e6838ac4f68696bfa1bf9e2c5da94509dd6 # v1.3.1
        with:
          runtime: nodejs
          directory: examples/cluster
          provider: eks
          providerVersion: ${{ inputs.providerVersion }}
        env:
          NODE_AUTH_TOKEN: ${{ steps.esc-secrets.outputs.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ steps.esc-secrets.outputs.NPM_TOKEN }}
          NPM_TOKEN: ${{ steps.esc-secrets.outputs.NPM_TOKEN }}
          PUBLISH_REPO_PASSWORD: ${{ steps.esc-secrets.outputs.OSSRH_PASSWORD }}
          PUBLISH_REPO_USERNAME: ${{ steps.esc-secrets.outputs.OSSRH_USERNAME }}
          PULUMI_ACCESS_TOKEN: ${{ steps.esc-secrets.outputs.PULUMI_ACCESS_TOKEN }}
          SIGNING_KEY: ${{ steps.esc-secrets.outputs.JAVA_SIGNING_KEY }}
          SIGNING_KEY_ID: ${{ steps.esc-secrets.outputs.JAVA_SIGNING_KEY_ID }}
          SIGNING_PASSWORD: ${{ steps.esc-secrets.outputs.JAVA_SIGNING_PASSWORD }}
          SLACK_WEBHOOK_URL: ${{ steps.esc-secrets.outputs.SLACK_WEBHOOK_URL }}
      - name: Verify dotnet release
        uses: pulumi/verify-provider-release@679d5e6838ac4f68696bfa1bf9e2c5da94509dd6 # v1.3.1
        with:
          runtime: dotnet
          directory: examples/cluster-cs
          provider: eks
          providerVersion: ${{ inputs.providerVersion }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ steps.esc-secrets.outputs.NPM_TOKEN }}
          NPM_TOKEN: ${{ steps.esc-secrets.outputs.NPM_TOKEN }}
          PUBLISH_REPO_PASSWORD: ${{ steps.esc-secrets.outputs.OSSRH_PASSWORD }}
          PUBLISH_REPO_USERNAME: ${{ steps.esc-secrets.outputs.OSSRH_USERNAME }}
          PULUMI_ACCESS_TOKEN: ${{ steps.esc-secrets.outputs.PULUMI_ACCESS_TOKEN }}
          SIGNING_KEY: ${{ steps.esc-secrets.outputs.JAVA_SIGNING_KEY }}
          SIGNING_KEY_ID: ${{ steps.esc-secrets.outputs.JAVA_SIGNING_KEY_ID }}
          SIGNING_PASSWORD: ${{ steps.esc-secrets.outputs.JAVA_SIGNING_PASSWORD }}
          SLACK_WEBHOOK_URL: ${{ steps.esc-secrets.outputs.SLACK_WEBHOOK_URL }}
