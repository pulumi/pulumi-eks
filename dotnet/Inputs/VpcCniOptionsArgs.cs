// *** WARNING: this file was generated by pulumi-gen-eks. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Eks.Inputs
{

    /// <summary>
    /// Describes the configuration options available for the Amazon VPC CNI plugin for Kubernetes.
    /// </summary>
    public sealed class VpcCniOptionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies that your pods may use subnets and security groups (within the same VPC as your control plane resources) that are independent of your cluster's `resourcesVpcConfig`.
        /// 
        /// Defaults to false.
        /// </summary>
        [Input("customNetworkConfig")]
        public Input<bool>? CustomNetworkConfig { get; set; }

        /// <summary>
        /// Specifies the ENI_CONFIG_LABEL_DEF environment variable value for worker nodes. This is used to tell Kubernetes to automatically apply the ENIConfig for each Availability Zone
        /// Ref: https://docs.aws.amazon.com/eks/latest/userguide/cni-custom-network.html (step 5(c))
        /// 
        /// Defaults to the official AWS CNI image in ECR.
        /// </summary>
        [Input("eniConfigLabelDef")]
        public Input<string>? EniConfigLabelDef { get; set; }

        /// <summary>
        /// Used to configure the MTU size for attached ENIs. The valid range is from 576 to 9001.
        /// 
        /// Defaults to 9001.
        /// </summary>
        [Input("eniMtu")]
        public Input<int>? EniMtu { get; set; }

        /// <summary>
        /// Specifies whether an external NAT gateway should be used to provide SNAT of secondary ENI IP addresses. If set to true, the SNAT iptables rule and off-VPC IP rule are not applied, and these rules are removed if they have already been applied.
        /// 
        /// Defaults to false.
        /// </summary>
        [Input("externalSnat")]
        public Input<bool>? ExternalSnat { get; set; }

        /// <summary>
        /// Specifies the container image to use in the AWS CNI cluster DaemonSet.
        /// 
        /// Defaults to the official AWS CNI image in ECR.
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Specifies the file path used for logs.
        /// 
        /// Defaults to "stdout" to emit Pod logs for `kubectl logs`.
        /// </summary>
        [Input("logFile")]
        public Input<string>? LogFile { get; set; }

        /// <summary>
        /// Specifies the log level used for logs.
        /// 
        /// Defaults to "DEBUG"
        /// See more options: https://git.io/fj92K
        /// </summary>
        [Input("logLevel")]
        public Input<string>? LogLevel { get; set; }

        /// <summary>
        /// Specifies whether NodePort services are enabled on a worker node's primary network interface. This requires additional iptables rules and that the kernel's reverse path filter on the primary interface is set to loose.
        /// 
        /// Defaults to true.
        /// </summary>
        [Input("nodePortSupport")]
        public Input<bool>? NodePortSupport { get; set; }

        /// <summary>
        /// Specifies the veth prefix used to generate the host-side veth device name for the CNI.
        /// 
        /// The prefix can be at most 4 characters long.
        /// 
        /// Defaults to "eni".
        /// </summary>
        [Input("vethPrefix")]
        public Input<string>? VethPrefix { get; set; }

        /// <summary>
        /// Specifies the number of free elastic network interfaces (and all of their available IP addresses) that the ipamD daemon should attempt to keep available for pod assignment on the node.
        /// 
        /// Defaults to 1.
        /// </summary>
        [Input("warmEniTarget")]
        public Input<int>? WarmEniTarget { get; set; }

        /// <summary>
        /// Specifies the number of free IP addresses that the ipamD daemon should attempt to keep available for pod assignment on the node.
        /// </summary>
        [Input("warmIpTarget")]
        public Input<int>? WarmIpTarget { get; set; }

        public VpcCniOptionsArgs()
        {
        }
    }
}
