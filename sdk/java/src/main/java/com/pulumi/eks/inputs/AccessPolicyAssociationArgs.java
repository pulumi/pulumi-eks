// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.eks.inputs;

import com.pulumi.aws.eks.inputs.AccessPolicyAssociationAccessScopeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Associates an access policy and its scope to an IAM principal.
 * 
 * See for more details:
 * https://docs.aws.amazon.com/eks/latest/userguide/access-entries.html
 * 
 */
public final class AccessPolicyAssociationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessPolicyAssociationArgs Empty = new AccessPolicyAssociationArgs();

    /**
     * The scope of the access policy association. This controls whether the access policy is scoped to the cluster or to a particular namespace.
     * 
     */
    @Import(name="accessScope", required=true)
    private Output<AccessPolicyAssociationAccessScopeArgs> accessScope;

    /**
     * @return The scope of the access policy association. This controls whether the access policy is scoped to the cluster or to a particular namespace.
     * 
     */
    public Output<AccessPolicyAssociationAccessScopeArgs> accessScope() {
        return this.accessScope;
    }

    /**
     * The ARN of the access policy to associate with the principal
     * 
     */
    @Import(name="policyArn", required=true)
    private Output<String> policyArn;

    /**
     * @return The ARN of the access policy to associate with the principal
     * 
     */
    public Output<String> policyArn() {
        return this.policyArn;
    }

    private AccessPolicyAssociationArgs() {}

    private AccessPolicyAssociationArgs(AccessPolicyAssociationArgs $) {
        this.accessScope = $.accessScope;
        this.policyArn = $.policyArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessPolicyAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessPolicyAssociationArgs $;

        public Builder() {
            $ = new AccessPolicyAssociationArgs();
        }

        public Builder(AccessPolicyAssociationArgs defaults) {
            $ = new AccessPolicyAssociationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessScope The scope of the access policy association. This controls whether the access policy is scoped to the cluster or to a particular namespace.
         * 
         * @return builder
         * 
         */
        public Builder accessScope(Output<AccessPolicyAssociationAccessScopeArgs> accessScope) {
            $.accessScope = accessScope;
            return this;
        }

        /**
         * @param accessScope The scope of the access policy association. This controls whether the access policy is scoped to the cluster or to a particular namespace.
         * 
         * @return builder
         * 
         */
        public Builder accessScope(AccessPolicyAssociationAccessScopeArgs accessScope) {
            return accessScope(Output.of(accessScope));
        }

        /**
         * @param policyArn The ARN of the access policy to associate with the principal
         * 
         * @return builder
         * 
         */
        public Builder policyArn(Output<String> policyArn) {
            $.policyArn = policyArn;
            return this;
        }

        /**
         * @param policyArn The ARN of the access policy to associate with the principal
         * 
         * @return builder
         * 
         */
        public Builder policyArn(String policyArn) {
            return policyArn(Output.of(policyArn));
        }

        public AccessPolicyAssociationArgs build() {
            $.accessScope = Objects.requireNonNull($.accessScope, "expected parameter 'accessScope' to be non-null");
            $.policyArn = Objects.requireNonNull($.policyArn, "expected parameter 'policyArn' to be non-null");
            return $;
        }
    }

}
