// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.eks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.eks.inputs.ClusterComputeConfigArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration Options for EKS Auto Mode. If EKS Auto Mode is enabled, AWS will manage cluster infrastructure on your behalf.
 * 
 * For more information, see: https://docs.aws.amazon.com/eks/latest/userguide/automode.html
 * 
 */
public final class AutoModeOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoModeOptionsArgs Empty = new AutoModeOptionsArgs();

    /**
     * Compute configuration for EKS Auto Mode.
     * 
     */
    @Import(name="computeConfig")
    private @Nullable Output<ClusterComputeConfigArgs> computeConfig;

    /**
     * @return Compute configuration for EKS Auto Mode.
     * 
     */
    public Optional<Output<ClusterComputeConfigArgs>> computeConfig() {
        return Optional.ofNullable(this.computeConfig);
    }

    /**
     * Whether to create an IAM role for the EKS Auto Mode node group if none is provided in `computeConfig`.
     * 
     */
    @Import(name="createNodeRole")
    private @Nullable Boolean createNodeRole;

    /**
     * @return Whether to create an IAM role for the EKS Auto Mode node group if none is provided in `computeConfig`.
     * 
     */
    public Optional<Boolean> createNodeRole() {
        return Optional.ofNullable(this.createNodeRole);
    }

    /**
     * Whether to enable EKS Auto Mode. If enabled, EKS will manage node pools, EBS volumes and Load Balancers for you.
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    /**
     * @return Whether to enable EKS Auto Mode. If enabled, EKS will manage node pools, EBS volumes and Load Balancers for you.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    private AutoModeOptionsArgs() {}

    private AutoModeOptionsArgs(AutoModeOptionsArgs $) {
        this.computeConfig = $.computeConfig;
        this.createNodeRole = $.createNodeRole;
        this.enabled = $.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoModeOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoModeOptionsArgs $;

        public Builder() {
            $ = new AutoModeOptionsArgs();
        }

        public Builder(AutoModeOptionsArgs defaults) {
            $ = new AutoModeOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeConfig Compute configuration for EKS Auto Mode.
         * 
         * @return builder
         * 
         */
        public Builder computeConfig(@Nullable Output<ClusterComputeConfigArgs> computeConfig) {
            $.computeConfig = computeConfig;
            return this;
        }

        /**
         * @param computeConfig Compute configuration for EKS Auto Mode.
         * 
         * @return builder
         * 
         */
        public Builder computeConfig(ClusterComputeConfigArgs computeConfig) {
            return computeConfig(Output.of(computeConfig));
        }

        /**
         * @param createNodeRole Whether to create an IAM role for the EKS Auto Mode node group if none is provided in `computeConfig`.
         * 
         * @return builder
         * 
         */
        public Builder createNodeRole(@Nullable Boolean createNodeRole) {
            $.createNodeRole = createNodeRole;
            return this;
        }

        /**
         * @param enabled Whether to enable EKS Auto Mode. If enabled, EKS will manage node pools, EBS volumes and Load Balancers for you.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        public AutoModeOptionsArgs build() {
            $.createNodeRole = Codegen.booleanProp("createNodeRole").arg($.createNodeRole).def(true).getNullable();
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("AutoModeOptionsArgs", "enabled");
            }
            return $;
        }
    }

}
