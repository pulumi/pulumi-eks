// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.eks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.eks.enums.AccessEntryType;
import com.pulumi.eks.outputs.AccessPolicyAssociation;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccessEntry {
    /**
     * @return The access policies to associate to the access entry.
     * 
     */
    private @Nullable Map<String,AccessPolicyAssociation> accessPolicies;
    /**
     * @return A list of groups within Kubernetes to which the IAM principal is mapped to.
     * 
     */
    private @Nullable List<String> kubernetesGroups;
    /**
     * @return The IAM Principal ARN which requires Authentication access to the EKS cluster.
     * 
     */
    private String principalArn;
    /**
     * @return The tags to apply to the AccessEntry.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the new access entry. Valid values are STANDARD, FARGATE_LINUX, EC2_LINUX, and EC2_WINDOWS.
     * Defaults to STANDARD which provides the standard workflow. EC2_LINUX, EC2_WINDOWS, FARGATE_LINUX types disallow users to input a username or kubernetesGroup, and prevent associating access policies.
     * 
     */
    private @Nullable AccessEntryType type;
    /**
     * @return Defaults to the principalArn if the principal is a user, else defaults to assume-role/session-name.
     * 
     */
    private @Nullable String username;

    private AccessEntry() {}
    /**
     * @return The access policies to associate to the access entry.
     * 
     */
    public Map<String,AccessPolicyAssociation> accessPolicies() {
        return this.accessPolicies == null ? Map.of() : this.accessPolicies;
    }
    /**
     * @return A list of groups within Kubernetes to which the IAM principal is mapped to.
     * 
     */
    public List<String> kubernetesGroups() {
        return this.kubernetesGroups == null ? List.of() : this.kubernetesGroups;
    }
    /**
     * @return The IAM Principal ARN which requires Authentication access to the EKS cluster.
     * 
     */
    public String principalArn() {
        return this.principalArn;
    }
    /**
     * @return The tags to apply to the AccessEntry.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the new access entry. Valid values are STANDARD, FARGATE_LINUX, EC2_LINUX, and EC2_WINDOWS.
     * Defaults to STANDARD which provides the standard workflow. EC2_LINUX, EC2_WINDOWS, FARGATE_LINUX types disallow users to input a username or kubernetesGroup, and prevent associating access policies.
     * 
     */
    public Optional<AccessEntryType> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Defaults to the principalArn if the principal is a user, else defaults to assume-role/session-name.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,AccessPolicyAssociation> accessPolicies;
        private @Nullable List<String> kubernetesGroups;
        private String principalArn;
        private @Nullable Map<String,String> tags;
        private @Nullable AccessEntryType type;
        private @Nullable String username;
        public Builder() {}
        public Builder(AccessEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicies = defaults.accessPolicies;
    	      this.kubernetesGroups = defaults.kubernetesGroups;
    	      this.principalArn = defaults.principalArn;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder accessPolicies(@Nullable Map<String,AccessPolicyAssociation> accessPolicies) {
            this.accessPolicies = accessPolicies;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesGroups(@Nullable List<String> kubernetesGroups) {
            this.kubernetesGroups = kubernetesGroups;
            return this;
        }
        public Builder kubernetesGroups(String... kubernetesGroups) {
            return kubernetesGroups(List.of(kubernetesGroups));
        }
        @CustomType.Setter
        public Builder principalArn(String principalArn) {
            this.principalArn = Objects.requireNonNull(principalArn);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable AccessEntryType type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }
        public AccessEntry build() {
            final var _resultValue = new AccessEntry();
            _resultValue.accessPolicies = accessPolicies;
            _resultValue.kubernetesGroups = kubernetesGroups;
            _resultValue.principalArn = principalArn;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
