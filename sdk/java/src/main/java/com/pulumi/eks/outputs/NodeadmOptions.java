// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.eks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class NodeadmOptions {
    /**
     * @return The actual content of the MIME document part, such as shell script code or nodeadm configuration. Must be compatible with the specified contentType.
     * 
     */
    private String content;
    /**
     * @return The MIME type of the content. Examples are `text/x-shellscript; charset=&#34;us-ascii&#34;` for shell scripts, and `application/node.eks.aws` nodeadm configuration.
     * 
     */
    private String contentType;

    private NodeadmOptions() {}
    /**
     * @return The actual content of the MIME document part, such as shell script code or nodeadm configuration. Must be compatible with the specified contentType.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return The MIME type of the content. Examples are `text/x-shellscript; charset=&#34;us-ascii&#34;` for shell scripts, and `application/node.eks.aws` nodeadm configuration.
     * 
     */
    public String contentType() {
        return this.contentType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeadmOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String content;
        private String contentType;
        public Builder() {}
        public Builder(NodeadmOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.contentType = defaults.contentType;
        }

        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("NodeadmOptions", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder contentType(String contentType) {
            if (contentType == null) {
              throw new MissingRequiredPropertyException("NodeadmOptions", "contentType");
            }
            this.contentType = contentType;
            return this;
        }
        public NodeadmOptions build() {
            final var _resultValue = new NodeadmOptions();
            _resultValue.content = content;
            _resultValue.contentType = contentType;
            return _resultValue;
        }
    }
}
