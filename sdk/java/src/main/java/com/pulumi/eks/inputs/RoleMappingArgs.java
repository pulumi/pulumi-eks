// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.eks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Describes a mapping from an AWS IAM role to a Kubernetes user and groups.
 * 
 */
public final class RoleMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleMappingArgs Empty = new RoleMappingArgs();

    /**
     * A list of groups within Kubernetes to which the role is mapped.
     * 
     */
    @Import(name="groups", required=true)
    private Output<List<String>> groups;

    /**
     * @return A list of groups within Kubernetes to which the role is mapped.
     * 
     */
    public Output<List<String>> groups() {
        return this.groups;
    }

    /**
     * The ARN of the IAM role to add.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return The ARN of the IAM role to add.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * The user name within Kubernetes to map to the IAM role. By default, the user name is the ARN of the IAM role.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The user name within Kubernetes to map to the IAM role. By default, the user name is the ARN of the IAM role.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private RoleMappingArgs() {}

    private RoleMappingArgs(RoleMappingArgs $) {
        this.groups = $.groups;
        this.roleArn = $.roleArn;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleMappingArgs $;

        public Builder() {
            $ = new RoleMappingArgs();
        }

        public Builder(RoleMappingArgs defaults) {
            $ = new RoleMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groups A list of groups within Kubernetes to which the role is mapped.
         * 
         * @return builder
         * 
         */
        public Builder groups(Output<List<String>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups A list of groups within Kubernetes to which the role is mapped.
         * 
         * @return builder
         * 
         */
        public Builder groups(List<String> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups A list of groups within Kubernetes to which the role is mapped.
         * 
         * @return builder
         * 
         */
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param roleArn The ARN of the IAM role to add.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The ARN of the IAM role to add.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param username The user name within Kubernetes to map to the IAM role. By default, the user name is the ARN of the IAM role.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The user name within Kubernetes to map to the IAM role. By default, the user name is the ARN of the IAM role.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public RoleMappingArgs build() {
            $.groups = Objects.requireNonNull($.groups, "expected parameter 'groups' to be non-null");
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
