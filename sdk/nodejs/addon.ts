// *** WARNING: this file was generated by pulumi-gen-eks. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

import {Cluster} from "./index";

/**
 * Addon manages an EKS add-on.
 * For more information about supported add-ons, see: https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html
 */
export class Addon extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'eks:index:Addon';

    /**
     * Returns true if the given object is an instance of Addon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Addon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Addon.__pulumiType;
    }


    /**
     * Create a Addon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AddonArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.addonName === undefined && !opts.urn) {
                throw new Error("Missing required property 'addonName'");
            }
            if (args?.cluster === undefined && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            resourceInputs["addonName"] = args?.addonName;
            resourceInputs["addonVersion"] = args?.addonVersion;
            resourceInputs["cluster"] = args?.cluster;
            resourceInputs["configurationValues"] = args?.configurationValues;
            resourceInputs["preserve"] = args?.preserve;
            resourceInputs["resolveConflictsOnCreate"] = args?.resolveConflictsOnCreate;
            resourceInputs["resolveConflictsOnUpdate"] = args?.resolveConflictsOnUpdate;
            resourceInputs["serviceAccountRoleArn"] = args?.serviceAccountRoleArn;
            resourceInputs["tags"] = args?.tags;
        } else {
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Addon.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Addon resource.
 */
export interface AddonArgs {
    /**
     * Name of the EKS add-on. The name must match one of the names returned by describe-addon-versions.
     */
    addonName: pulumi.Input<string>;
    /**
     * The version of the EKS add-on. The version must match one of the versions returned by describe-addon-versions.
     */
    addonVersion?: pulumi.Input<string>;
    /**
     * The target EKS cluster.
     */
    cluster: pulumi.Input<Cluster>;
    /**
     * Custom configuration values for addons specified as an object. This object value must match the JSON schema derived from describe-addon-configuration.
     */
    configurationValues?: pulumi.Input<{[key: string]: any}>;
    /**
     * Indicates if you want to preserve the created resources when deleting the EKS add-on.
     */
    preserve?: pulumi.Input<boolean>;
    /**
     * How to resolve field value conflicts when migrating a self-managed add-on to an Amazon EKS add-on. Valid values are NONE and OVERWRITE. For more details see the CreateAddon API Docs.
     */
    resolveConflictsOnCreate?: pulumi.Input<string>;
    /**
     * How to resolve field value conflicts for an Amazon EKS add-on if you've changed a value from the Amazon EKS default value. Valid values are NONE, OVERWRITE, and PRESERVE. For more details see the UpdateAddon API Docs.
     */
    resolveConflictsOnUpdate?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the permissions assigned to the node IAM role. For more information, see Amazon EKS node IAM role in the Amazon EKS User Guide.
     *
     * 						Note: To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for your cluster. For more information, see Enabling IAM roles for service accounts on your cluster in the Amazon EKS User Guide.
     */
    serviceAccountRoleArn?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
}
