// *** WARNING: this file was generated by pulumi-gen-eks. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AccessEntryType = {
    /**
     * Standard Access Entry Workflow. Allows users to input a username and kubernetesGroup, and to associate access policies.
     */
    Standard: "STANDARD",
    /**
     * For IAM roles used with AWS Fargate profiles.
     */
    FargateLinux: "FARGATE_LINUX",
    /**
     * For IAM roles associated with self-managed Linux node groups. Allows the nodes to join the cluster.
     */
    EC2Linux: "EC2_LINUX",
    /**
     * For IAM roles associated with self-managed Windows node groups. Allows the nodes to join the cluster.
     */
    EC2Windows: "EC2_WINDOWS",
    /**
     * @deprecated Use `Standard` instead`
     */
    STANDARD: "STANDARD",
    /**
     * @deprecated Use `FargateLinux` instead`
     */
    FARGATE_LINUX: "FARGATE_LINUX",
    /**
     * @deprecated Use `EC2Linux` instead`
     */
    EC2_LINUX: "EC2_LINUX",
    /**
     * @deprecated Use `EC2Windows` instead`
     */
    EC2_WINDOWS: "EC2_WINDOWS",
} as const;

/**
 * The type of the new access entry. Valid values are STANDARD, FARGATE_LINUX, EC2_LINUX, and EC2_WINDOWS.
 * Defaults to STANDARD which provides the standard workflow. EC2_LINUX and EC2_WINDOWS types disallow users to input a kubernetesGroup, and prevent associating access policies.
 */
export type AccessEntryType = (typeof AccessEntryType)[keyof typeof AccessEntryType];

export const AmiType = {
    /**
     * @deprecated Amazon Linux 2 is deprecated. Please use Amazon Linux 2023 instead.
See for more details: https://docs.aws.amazon.com/eks/latest/userguide/al2023.html
     */
    AL2X86_64: "AL2_x86_64",
    /**
     * @deprecated Amazon Linux 2 is deprecated. Please use Amazon Linux 2023 instead.
See for more details: https://docs.aws.amazon.com/eks/latest/userguide/al2023.html
     */
    AL2X86_64GPU: "AL2_x86_64_GPU",
    /**
     * @deprecated Amazon Linux 2 is deprecated. Please use Amazon Linux 2023 instead.
See for more details: https://docs.aws.amazon.com/eks/latest/userguide/al2023.html
     */
    AL2Arm64: "AL2_ARM_64",
    AL2023X86_64Standard: "AL2023_x86_64_STANDARD",
    AL2023Arm64Standard: "AL2023_ARM_64_STANDARD",
    BottlerocketArm64: "BOTTLEROCKET_ARM_64",
    BottlerocketX86_64: "BOTTLEROCKET_x86_64",
    BottlerocketArm64Nvidia: "BOTTLEROCKET_ARM_64_NVIDIA",
    BottlerocketX86_64Nvidia: "BOTTLEROCKET_x86_64_NVIDIA",
} as const;

/**
 * Predefined AMI types for EKS optimized AMIs. Can be used to select the latest EKS optimized AMI for a node group.
 */
export type AmiType = (typeof AmiType)[keyof typeof AmiType];

export const AuthenticationMode = {
    /**
     * Only aws-auth ConfigMap will be used for authenticating to the Kubernetes API.
     *
     * @deprecated The aws-auth ConfigMap is deprecated. The recommended method to manage access to Kubernetes APIs is Access Entries with the AuthenticationMode API.
For more information and instructions how to upgrade, see https://docs.aws.amazon.com/eks/latest/userguide/migrating-access-entries.html.
     */
    ConfigMap: "CONFIG_MAP",
    /**
     * Only Access Entries will be used for authenticating to the Kubernetes API.
     */
    Api: "API",
    /**
     * Both aws-auth ConfigMap and Access Entries can be used for authenticating to the Kubernetes API.
     *
     * @deprecated The aws-auth ConfigMap is deprecated. The recommended method to manage access to Kubernetes APIs is Access Entries with the AuthenticationMode API.
For more information and instructions how to upgrade, see https://docs.aws.amazon.com/eks/latest/userguide/migrating-access-entries.html.
     */
    ApiAndConfigMap: "API_AND_CONFIG_MAP",
    /**
     * @deprecated Use `ConfigMap` instead
     */
    CONFIG_MAP: "CONFIG_MAP",
    /**
     * @deprecated Use `Api` instead
     */
    API: "API",
    /**
     * @deprecated Use `ApiAndConfigMap` instead
     */
    API_AND_CONFIG_MAP: "API_AND_CONFIG_MAP",
} as const;

/**
 * The authentication mode of the cluster. Valid values are `CONFIG_MAP`, `API` or `API_AND_CONFIG_MAP`.
 *
 * See for more details:
 * https://docs.aws.amazon.com/eks/latest/userguide/grant-k8s-access.html#set-cam
 */
export type AuthenticationMode = (typeof AuthenticationMode)[keyof typeof AuthenticationMode];

export const OperatingSystem = {
    /**
     * EKS optimized OS based on Amazon Linux 2 (AL2).
     *
     * @deprecated Amazon Linux 2 is deprecated. Please use Amazon Linux 2023 instead.
See for more details: https://docs.aws.amazon.com/eks/latest/userguide/al2023.html
     */
    AL2: "AL2",
    /**
     * EKS optimized OS based on Amazon Linux 2023 (AL2023).
     * See for more details: https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
     */
    AL2023: "AL2023",
    /**
     * EKS optimized Container OS based on Bottlerocket.
     * See for more details: https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami-bottlerocket.html
     */
    Bottlerocket: "Bottlerocket",
} as const;

/**
 * The type of EKS optimized Operating System to use for node groups.
 *
 * See for more details:
 * https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-amis.html
 */
export type OperatingSystem = (typeof OperatingSystem)[keyof typeof OperatingSystem];

export const ResolveConflictsOnCreate = {
    /**
     * If the self-managed version of the add-on is installed on your cluster, Amazon EKS doesn't change the value. Creation of the add-on might fail.
     */
    None: "NONE",
    /**
     * If the self-managed version of the add-on is installed on your cluster and the Amazon EKS default value is different than the existing value, Amazon EKS changes the value to the Amazon EKS default value.
     */
    Overwrite: "OVERWRITE",
} as const;

/**
 * How to resolve field value conflicts when migrating a self-managed add-on to an Amazon EKS add-on. Valid values are `NONE` and `OVERWRITE`. For more details see the [CreateAddon](https://docs.aws.amazon.com/eks/latest/APIReference/API_CreateAddon.html) API Docs.
 */
export type ResolveConflictsOnCreate = (typeof ResolveConflictsOnCreate)[keyof typeof ResolveConflictsOnCreate];

export const ResolveConflictsOnUpdate = {
    /**
     * Amazon EKS doesn't change the value. The update might fail.
     */
    None: "NONE",
    /**
     * Amazon EKS overwrites the changed value back to the Amazon EKS default value.
     */
    Overwrite: "OVERWRITE",
    /**
     * Amazon EKS preserves the value. If you choose this option, we recommend that you test any field and value changes on a non-production cluster before updating the add-on on your production cluster.
     */
    Preserve: "PRESERVE",
} as const;

/**
 * How to resolve field value conflicts for an Amazon EKS add-on if you've changed a value from the Amazon EKS default value. Valid values are `NONE`, `OVERWRITE`, and `PRESERVE`. For more details see the [UpdateAddon](https://docs.aws.amazon.com/eks/latest/APIReference/API_UpdateAddon.html) API Docs.
 */
export type ResolveConflictsOnUpdate = (typeof ResolveConflictsOnUpdate)[keyof typeof ResolveConflictsOnUpdate];
