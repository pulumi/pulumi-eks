// *** WARNING: this file was generated by pulumi-gen-eks. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AddonArgs } from "./addon";
export type Addon = import("./addon").Addon;
export const Addon: typeof import("./addon").Addon = null as any;
utilities.lazyLoad(exports, ["Addon"], () => require("./addon"));

export * from "./cluster";
import { Cluster } from "./cluster";

export { ClusterCreationRoleProviderArgs } from "./clusterCreationRoleProvider";
export type ClusterCreationRoleProvider = import("./clusterCreationRoleProvider").ClusterCreationRoleProvider;
export const ClusterCreationRoleProvider: typeof import("./clusterCreationRoleProvider").ClusterCreationRoleProvider = null as any;
utilities.lazyLoad(exports, ["ClusterCreationRoleProvider"], () => require("./clusterCreationRoleProvider"));

export * from "./clusterMixins";
export { ManagedNodeGroupArgs } from "./managedNodeGroup";
export type ManagedNodeGroup = import("./managedNodeGroup").ManagedNodeGroup;
export const ManagedNodeGroup: typeof import("./managedNodeGroup").ManagedNodeGroup = null as any;
utilities.lazyLoad(exports, ["ManagedNodeGroup"], () => require("./managedNodeGroup"));

export { NodeGroupArgs } from "./nodeGroup";
export type NodeGroup = import("./nodeGroup").NodeGroup;
export const NodeGroup: typeof import("./nodeGroup").NodeGroup = null as any;
utilities.lazyLoad(exports, ["NodeGroup"], () => require("./nodeGroup"));

export { NodeGroupSecurityGroupArgs } from "./nodeGroupSecurityGroup";
export type NodeGroupSecurityGroup = import("./nodeGroupSecurityGroup").NodeGroupSecurityGroup;
export const NodeGroupSecurityGroup: typeof import("./nodeGroupSecurityGroup").NodeGroupSecurityGroup = null as any;
utilities.lazyLoad(exports, ["NodeGroupSecurityGroup"], () => require("./nodeGroupSecurityGroup"));

export { NodeGroupV2Args } from "./nodeGroupV2";
export type NodeGroupV2 = import("./nodeGroupV2").NodeGroupV2;
export const NodeGroupV2: typeof import("./nodeGroupV2").NodeGroupV2 = null as any;
utilities.lazyLoad(exports, ["NodeGroupV2"], () => require("./nodeGroupV2"));

export * from "./nodegroupMixins";
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export * from "./storageclassMixins";
export { VpcCniAddonArgs } from "./vpcCniAddon";
export type VpcCniAddon = import("./vpcCniAddon").VpcCniAddon;
export const VpcCniAddon: typeof import("./vpcCniAddon").VpcCniAddon = null as any;
utilities.lazyLoad(exports, ["VpcCniAddon"], () => require("./vpcCniAddon"));


// Export enums:
export * from "./types/enums";

// Export sub-modules:
import * as types from "./types";

export {
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "eks:index:Addon":
                return new Addon(name, <any>undefined, { urn })
            case "eks:index:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "eks:index:ClusterCreationRoleProvider":
                return new ClusterCreationRoleProvider(name, <any>undefined, { urn })
            case "eks:index:ManagedNodeGroup":
                return new ManagedNodeGroup(name, <any>undefined, { urn })
            case "eks:index:NodeGroup":
                return new NodeGroup(name, <any>undefined, { urn })
            case "eks:index:NodeGroupSecurityGroup":
                return new NodeGroupSecurityGroup(name, <any>undefined, { urn })
            case "eks:index:NodeGroupV2":
                return new NodeGroupV2(name, <any>undefined, { urn })
            case "eks:index:VpcCniAddon":
                return new VpcCniAddon(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("eks", "index", _module)
pulumi.runtime.registerResourcePackage("eks", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:eks") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
