// *** WARNING: this file was generated by pulumi-gen-eks. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Eks
{
    /// <summary>
    /// The type of the new access entry. Valid values are STANDARD, FARGATE_LINUX, EC2_LINUX, and EC2_WINDOWS.
    /// Defaults to STANDARD which provides the standard workflow. EC2_LINUX and EC2_WINDOWS types disallow users to input a kubernetesGroup, and prevent associating access policies.
    /// </summary>
    [EnumType]
    public readonly struct AccessEntryType : IEquatable<AccessEntryType>
    {
        private readonly string _value;

        private AccessEntryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Standard Access Entry Workflow. Allows users to input a username and kubernetesGroup, and to associate access policies.
        /// </summary>
        public static AccessEntryType Standard { get; } = new AccessEntryType("STANDARD");
        /// <summary>
        /// For IAM roles used with AWS Fargate profiles.
        /// </summary>
        public static AccessEntryType FargateLinux { get; } = new AccessEntryType("FARGATE_LINUX");
        /// <summary>
        /// For IAM roles associated with self-managed Linux node groups. Allows the nodes to join the cluster.
        /// </summary>
        public static AccessEntryType EC2Linux { get; } = new AccessEntryType("EC2_LINUX");
        /// <summary>
        /// For IAM roles associated with self-managed Windows node groups. Allows the nodes to join the cluster.
        /// </summary>
        public static AccessEntryType EC2Windows { get; } = new AccessEntryType("EC2_WINDOWS");

        public static bool operator ==(AccessEntryType left, AccessEntryType right) => left.Equals(right);
        public static bool operator !=(AccessEntryType left, AccessEntryType right) => !left.Equals(right);

        public static explicit operator string(AccessEntryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessEntryType other && Equals(other);
        public bool Equals(AccessEntryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Predefined AMI types for EKS optimized AMIs. Can be used to select the latest EKS optimized AMI for a node group.
    /// </summary>
    [EnumType]
    public readonly struct AmiType : IEquatable<AmiType>
    {
        private readonly string _value;

        private AmiType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        [Obsolete(@"Amazon Linux 2 is deprecated. Please use Amazon Linux 2023 instead.
See for more details: https://docs.aws.amazon.com/eks/latest/userguide/al2023.html")]
        public static AmiType AL2X86_64 { get; } = new AmiType("AL2_x86_64");
        [Obsolete(@"Amazon Linux 2 is deprecated. Please use Amazon Linux 2023 instead.
See for more details: https://docs.aws.amazon.com/eks/latest/userguide/al2023.html")]
        public static AmiType AL2X86_64GPU { get; } = new AmiType("AL2_x86_64_GPU");
        [Obsolete(@"Amazon Linux 2 is deprecated. Please use Amazon Linux 2023 instead.
See for more details: https://docs.aws.amazon.com/eks/latest/userguide/al2023.html")]
        public static AmiType AL2Arm64 { get; } = new AmiType("AL2_ARM_64");
        public static AmiType AL2023X86_64Standard { get; } = new AmiType("AL2023_x86_64_STANDARD");
        public static AmiType AL2023Arm64Standard { get; } = new AmiType("AL2023_ARM_64_STANDARD");
        public static AmiType BottlerocketArm64 { get; } = new AmiType("BOTTLEROCKET_ARM_64");
        public static AmiType BottlerocketX86_64 { get; } = new AmiType("BOTTLEROCKET_x86_64");
        public static AmiType BottlerocketArm64Nvidia { get; } = new AmiType("BOTTLEROCKET_ARM_64_NVIDIA");
        public static AmiType BottlerocketX86_64Nvidia { get; } = new AmiType("BOTTLEROCKET_x86_64_NVIDIA");

        public static bool operator ==(AmiType left, AmiType right) => left.Equals(right);
        public static bool operator !=(AmiType left, AmiType right) => !left.Equals(right);

        public static explicit operator string(AmiType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AmiType other && Equals(other);
        public bool Equals(AmiType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication mode of the cluster. Valid values are `CONFIG_MAP`, `API` or `API_AND_CONFIG_MAP`.
    /// 
    /// See for more details:
    /// https://docs.aws.amazon.com/eks/latest/userguide/grant-k8s-access.html#set-cam
    /// </summary>
    [EnumType]
    public readonly struct AuthenticationMode : IEquatable<AuthenticationMode>
    {
        private readonly string _value;

        private AuthenticationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Only aws-auth ConfigMap will be used for authenticating to the Kubernetes API.
        /// </summary>
        [Obsolete(@"The aws-auth ConfigMap is deprecated. The recommended method to manage access to Kubernetes APIs is Access Entries with the AuthenticationMode API.
For more information and instructions how to upgrade, see https://docs.aws.amazon.com/eks/latest/userguide/migrating-access-entries.html.")]
        public static AuthenticationMode ConfigMap { get; } = new AuthenticationMode("CONFIG_MAP");
        /// <summary>
        /// Only Access Entries will be used for authenticating to the Kubernetes API.
        /// </summary>
        public static AuthenticationMode Api { get; } = new AuthenticationMode("API");
        /// <summary>
        /// Both aws-auth ConfigMap and Access Entries can be used for authenticating to the Kubernetes API.
        /// </summary>
        [Obsolete(@"The aws-auth ConfigMap is deprecated. The recommended method to manage access to Kubernetes APIs is Access Entries with the AuthenticationMode API.
For more information and instructions how to upgrade, see https://docs.aws.amazon.com/eks/latest/userguide/migrating-access-entries.html.")]
        public static AuthenticationMode ApiAndConfigMap { get; } = new AuthenticationMode("API_AND_CONFIG_MAP");

        public static bool operator ==(AuthenticationMode left, AuthenticationMode right) => left.Equals(right);
        public static bool operator !=(AuthenticationMode left, AuthenticationMode right) => !left.Equals(right);

        public static explicit operator string(AuthenticationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthenticationMode other && Equals(other);
        public bool Equals(AuthenticationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of EKS optimized Operating System to use for node groups.
    /// 
    /// See for more details:
    /// https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-amis.html
    /// </summary>
    [EnumType]
    public readonly struct OperatingSystem : IEquatable<OperatingSystem>
    {
        private readonly string _value;

        private OperatingSystem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// EKS optimized OS based on Amazon Linux 2 (AL2).
        /// </summary>
        [Obsolete(@"Amazon Linux 2 is deprecated. Please use Amazon Linux 2023 instead.
See for more details: https://docs.aws.amazon.com/eks/latest/userguide/al2023.html")]
        public static OperatingSystem AL2 { get; } = new OperatingSystem("AL2");
        /// <summary>
        /// EKS optimized OS based on Amazon Linux 2023 (AL2023).
        /// See for more details: https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
        /// </summary>
        public static OperatingSystem AL2023 { get; } = new OperatingSystem("AL2023");
        /// <summary>
        /// EKS optimized Container OS based on Bottlerocket.
        /// See for more details: https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami-bottlerocket.html
        /// </summary>
        public static OperatingSystem Bottlerocket { get; } = new OperatingSystem("Bottlerocket");

        public static bool operator ==(OperatingSystem left, OperatingSystem right) => left.Equals(right);
        public static bool operator !=(OperatingSystem left, OperatingSystem right) => !left.Equals(right);

        public static explicit operator string(OperatingSystem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatingSystem other && Equals(other);
        public bool Equals(OperatingSystem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// How to resolve field value conflicts when migrating a self-managed add-on to an Amazon EKS add-on. Valid values are `NONE` and `OVERWRITE`. For more details see the [CreateAddon](https://docs.aws.amazon.com/eks/latest/APIReference/API_CreateAddon.html) API Docs.
    /// </summary>
    [EnumType]
    public readonly struct ResolveConflictsOnCreate : IEquatable<ResolveConflictsOnCreate>
    {
        private readonly string _value;

        private ResolveConflictsOnCreate(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// If the self-managed version of the add-on is installed on your cluster, Amazon EKS doesn't change the value. Creation of the add-on might fail.
        /// </summary>
        public static ResolveConflictsOnCreate None { get; } = new ResolveConflictsOnCreate("NONE");
        /// <summary>
        /// If the self-managed version of the add-on is installed on your cluster and the Amazon EKS default value is different than the existing value, Amazon EKS changes the value to the Amazon EKS default value.
        /// </summary>
        public static ResolveConflictsOnCreate Overwrite { get; } = new ResolveConflictsOnCreate("OVERWRITE");

        public static bool operator ==(ResolveConflictsOnCreate left, ResolveConflictsOnCreate right) => left.Equals(right);
        public static bool operator !=(ResolveConflictsOnCreate left, ResolveConflictsOnCreate right) => !left.Equals(right);

        public static explicit operator string(ResolveConflictsOnCreate value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResolveConflictsOnCreate other && Equals(other);
        public bool Equals(ResolveConflictsOnCreate other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// How to resolve field value conflicts for an Amazon EKS add-on if you've changed a value from the Amazon EKS default value. Valid values are `NONE`, `OVERWRITE`, and `PRESERVE`. For more details see the [UpdateAddon](https://docs.aws.amazon.com/eks/latest/APIReference/API_UpdateAddon.html) API Docs.
    /// </summary>
    [EnumType]
    public readonly struct ResolveConflictsOnUpdate : IEquatable<ResolveConflictsOnUpdate>
    {
        private readonly string _value;

        private ResolveConflictsOnUpdate(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Amazon EKS doesn't change the value. The update might fail.
        /// </summary>
        public static ResolveConflictsOnUpdate None { get; } = new ResolveConflictsOnUpdate("NONE");
        /// <summary>
        /// Amazon EKS overwrites the changed value back to the Amazon EKS default value.
        /// </summary>
        public static ResolveConflictsOnUpdate Overwrite { get; } = new ResolveConflictsOnUpdate("OVERWRITE");
        /// <summary>
        /// Amazon EKS preserves the value. If you choose this option, we recommend that you test any field and value changes on a non-production cluster before updating the add-on on your production cluster.
        /// </summary>
        public static ResolveConflictsOnUpdate Preserve { get; } = new ResolveConflictsOnUpdate("PRESERVE");

        public static bool operator ==(ResolveConflictsOnUpdate left, ResolveConflictsOnUpdate right) => left.Equals(right);
        public static bool operator !=(ResolveConflictsOnUpdate left, ResolveConflictsOnUpdate right) => !left.Equals(right);

        public static explicit operator string(ResolveConflictsOnUpdate value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResolveConflictsOnUpdate other && Equals(other);
        public bool Equals(ResolveConflictsOnUpdate other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
