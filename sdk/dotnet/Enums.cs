// *** WARNING: this file was generated by pulumi-gen-eks. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Eks
{
    /// <summary>
    /// The type of the new access entry. Valid values are STANDARD, FARGATE_LINUX, EC2_LINUX, and EC2_WINDOWS.
    /// Defaults to STANDARD which provides the standard workflow. EC2_LINUX and EC2_WINDOWS types disallow users to input a kubernetesGroup, and prevent associating access policies.
    /// </summary>
    [EnumType]
    public readonly struct AccessEntryType : IEquatable<AccessEntryType>
    {
        private readonly string _value;

        private AccessEntryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Standard Access Entry Workflow. Allows users to input a username and kubernetesGroup, and to associate access policies.
        /// </summary>
        public static AccessEntryType Standard { get; } = new AccessEntryType("STANDARD");
        /// <summary>
        /// For IAM roles used with AWS Fargate profiles.
        /// </summary>
        public static AccessEntryType FargateLinux { get; } = new AccessEntryType("FARGATE_LINUX");
        /// <summary>
        /// For IAM roles associated with self-managed Linux node groups. Allows the nodes to join the cluster.
        /// </summary>
        public static AccessEntryType EC2Linux { get; } = new AccessEntryType("EC2_LINUX");
        /// <summary>
        /// For IAM roles associated with self-managed Windows node groups. Allows the nodes to join the cluster.
        /// </summary>
        public static AccessEntryType EC2Windows { get; } = new AccessEntryType("EC2_WINDOWS");

        public static bool operator ==(AccessEntryType left, AccessEntryType right) => left.Equals(right);
        public static bool operator !=(AccessEntryType left, AccessEntryType right) => !left.Equals(right);

        public static explicit operator string(AccessEntryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessEntryType other && Equals(other);
        public bool Equals(AccessEntryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication mode of the cluster. Valid values are `CONFIG_MAP`, `API` or `API_AND_CONFIG_MAP`.
    /// 
    /// See for more details:
    /// https://docs.aws.amazon.com/eks/latest/userguide/grant-k8s-access.html#set-cam
    /// </summary>
    [EnumType]
    public readonly struct AuthenticationMode : IEquatable<AuthenticationMode>
    {
        private readonly string _value;

        private AuthenticationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Only aws-auth ConfigMap will be used for authenticating to the Kubernetes API.
        /// </summary>
        public static AuthenticationMode ConfigMap { get; } = new AuthenticationMode("CONFIG_MAP");
        /// <summary>
        /// Only Access Entries will be used for authenticating to the Kubernetes API.
        /// </summary>
        public static AuthenticationMode Api { get; } = new AuthenticationMode("API");
        /// <summary>
        /// Both aws-auth ConfigMap and Access Entries can be used for authenticating to the Kubernetes API.
        /// </summary>
        public static AuthenticationMode ApiAndConfigMap { get; } = new AuthenticationMode("API_AND_CONFIG_MAP");

        public static bool operator ==(AuthenticationMode left, AuthenticationMode right) => left.Equals(right);
        public static bool operator !=(AuthenticationMode left, AuthenticationMode right) => !left.Equals(right);

        public static explicit operator string(AuthenticationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthenticationMode other && Equals(other);
        public bool Equals(AuthenticationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
