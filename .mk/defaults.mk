# WARNING: This file is autogenerated - changes will be overwritten if not made
# via https://github.com/pulumi/ci-mgmt.
#
# This file contains default make targets consumed by CI workflows. This targets are no-ops and are intended to be 
#
# does not
# make any assumptions about the provider such as its language, file structure,
# etc.
#
# A top-level `Makefile` is required and must implement provider-specific
# targets like `test`.
#
# In order to use these targets, the top-level Makefile must include this file:
#
#    include .mk/defaults.mk
#
# If the top-level Makefile implements a target like `test`, then this will be
# invoked in CI. Otherwise, the `default.test` target will be used.

include .mk/vars.mk

# Implement `prerequisites` to run custom logic before all SDK and provider build steps.
default.prebuild:
	@echo "No prerequisites to build"

default.development: install_plugins provider build_sdks install_sdks

default.build: install_plugins provider build_sdks install_sdks

default.build_sdks: build_nodejs build_python build_dotnet build_go build_java 

default.install_go_sdk:

default.install_java_sdk:

default.install_python_sdk:

default.install_sdks: install_dotnet_sdk install_python_sdk install_nodejs_sdk install_java_sdk


default.build_dotnet: export PULUMI_HOME := $(WORKING_DIR)/.pulumi
default.build_dotnet: export PATH := $(WORKING_DIR)/.pulumi/bin:$(PATH)
default.build_dotnet: export PULUMI_CONVERT_EXAMPLES_CACHE_DIR := $(WORKING_DIR)/.pulumi/examples-cache
default.build_dotnet: prebuild
	rm -rf sdk/dotnet
	PULUMI_CONVERT=$(PULUMI_CONVERT) PULUMI_DISABLE_AUTOMATIC_PLUGIN_ACQUISITION=$(PULUMI_CONVERT) $(WORKING_DIR)/bin/$(TFGEN) dotnet --out sdk/dotnet/
	cd sdk/dotnet/ && \
		printf "module fake_dotnet_module // Exclude this directory from Go tools\n\ngo 1.17\n" > go.mod && \
		echo "$(VERSION_GENERIC)" >version.txt && \
		dotnet build

default.build_go: export PULUMI_HOME := $(WORKING_DIR)/.pulumi
default.build_go: export PATH := $(WORKING_DIR)/.pulumi/bin:$(PATH)
default.build_go: export PULUMI_CONVERT_EXAMPLES_CACHE_DIR := $(WORKING_DIR)/.pulumi/examples-cache
default.build_go: prebuild
	PULUMI_CONVERT=$(PULUMI_CONVERT) PULUMI_DISABLE_AUTOMATIC_PLUGIN_ACQUISITION=$(PULUMI_CONVERT) $(WORKING_DIR)/bin/$(TFGEN) go --out sdk/go/
	cd sdk && go list "$$(grep -e "^module" go.mod | cut -d ' ' -f 2)/go/..." | xargs -I {} bash -c 'go build {} && go clean -i {}'

default.build_java: PACKAGE_VERSION := $(VERSION_GENERIC)
default.build_java: export PULUMI_HOME := $(WORKING_DIR)/.pulumi
default.build_java: export PATH := $(WORKING_DIR)/.pulumi/bin:$(PATH)
default.build_java: export PULUMI_CONVERT_EXAMPLES_CACHE_DIR := $(WORKING_DIR)/.pulumi/examples-cache
default.build_java: bin/pulumi-java-gen
default.build_java: prebuild
	rm -rf sdk/java/
	$(WORKING_DIR)/bin/$(JAVA_GEN) generate --schema $(SCHEMA_PATH) --out sdk/java  --build gradle-nexus
	cd sdk/java/ && \
		printf "module fake_java_module // Exclude this directory from Go tools\n\ngo 1.17\n" > go.mod && \
		gradle --console=plain build && \
		gradle --console=plain javadoc

default.build_nodejs: export PULUMI_HOME := $(WORKING_DIR)/.pulumi
default.build_nodejs: export PATH := $(WORKING_DIR)/.pulumi/bin:$(PATH)
default.build_nodejs: export PULUMI_CONVERT_EXAMPLES_CACHE_DIR := $(WORKING_DIR)/.pulumi/examples-cache
default.build_nodejs: prebuild
	rm -rf sdk/nodejs/
	cd sdk/nodejs/ && \
		printf "module fake_nodejs_module // Exclude this directory from Go tools\n\ngo 1.17\n" > go.mod && \
		yarn install && \
		yarn run tsc && \
		cp ../../README.md ../../LICENSE* package.json yarn.lock ./bin/

default.build_python: export PULUMI_HOME := $(WORKING_DIR)/.pulumi
default.build_python: export PATH := $(WORKING_DIR)/.pulumi/bin:$(PATH)
default.build_python: export PULggUMI_CONVERT_EXAMPLES_CACHE_DIR := $(WORKING_DIR)/.pulumi/examples-cache
default.build_python: prebuild
	rm -rf sdk/python/
	cd sdk/python/ && \
		printf "module fake_python_module // Exclude this directory from Go tools\n\ngo 1.17\n" > go.mod && \
		cp ../../README.md . && \
		rm -rf ./bin/ ../python.bin/ && cp -R . ../python.bin && mv ../python.bin ./bin && \
		rm ./bin/go.mod && \
		python3 -m venv venv && \
		./venv/bin/python -m pip install build==1.2.1 && \
		cd ./bin && \
		../venv/bin/python -m build .

default.clean:
	rm -rf sdk/{dotnet,nodejs,go,python}
	rm -rf $(WORKING_DIR)/bin

default.docs:
	@echo "Define a `docs` target to generate docs."

default.install_dotnet_sdk:
	mkdir -p $(WORKING_DIR)/nuget
	find . -name '*.nupkg' -print -exec cp -p {} $(WORKING_DIR)/nuget \;

default.install_nodejs_sdk:
	yarn link --cwd $(WORKING_DIR)/sdk/nodejs/bin

default.install_plugins: export PULUMI_HOME := $(WORKING_DIR)/.pulumi
default.install_plugins: export PATH := $(WORKING_DIR)/.pulumi/bin:$(PATH)
default.install_plugins: .pulumi/bin/pulumi

default.lint_provider: provider
	cd provider && golangci-lint run --path-prefix provider -c ../.golangci.yml

# `lint_provider.fix` is a utility target meant to be run manually
# that will run the linter and fix errors when possible.
default.lint_provider.fix:
	cd provider && golangci-lint run --path-prefix provider -c ../.golangci.yml --fix

# `make provider_no_deps` builds the provider binary directly, without ensuring that
# `cmd/pulumi-resource-eks/schema.json` is valid and up to date.
# To create a release ready binary, you should use `make provider`.
default.provider:
	(cd provider && go build $(PULUMI_PROVIDER_BUILD_PARALLELISM) -o $(WORKING_DIR)/bin/$(PROVIDER) -ldflags "$(LDFLAGS)" $(PROJECT)/$(PROVIDER_PATH)/cmd/$(PROVIDER))

default.test: export PATH := $(WORKING_DIR)/bin:$(PATH)
default.test:
	cd examples && go test -v -tags=all -parallel $(TESTPARALLELISM) -timeout 2h

default.test_provider:
	@echo ""
	@echo "== test_provider ==================================================================="
	@echo ""
	cd provider && go test -v -short ./... -parallel $(TESTPARALLELISM)

default.bin/pulumi-java-gen:
	mkdir -p bin/
	pulumictl download-binary -n pulumi-language-java -v $(JAVA_GEN_VERSION) -r pulumi/pulumi-java

# To make an immediately observable change to .ci-mgmt.yaml:
#
# - Edit .ci-mgmt.yaml
# - Run make ci-mgmt to apply the change locally.
#
default.ci-mgmt: .ci-mgmt.yaml
	go run github.com/pulumi/ci-mgmt/provider-ci@master generate \
		--name $(ORG)/pulumi-$(PACK) \
		--out . \
		--template generic \
		--config $<

# Because some codegen depends on the version of the CLI used, we install a local CLI
# version pinned to the same version as `provider/go.mod`.
#
# This logic compares the version of .pulumi/bin/pulumi already installed. If it matches
# the desired version, we just print. Otherwise we (re)install pulumi at the desired
# version.
default..pulumi/bin/pulumi: .pulumi/version
	@if [ -x .pulumi/bin/pulumi ] && [ "v$$(cat .pulumi/version)" = "$$(.pulumi/bin/pulumi version)" ]; then \
		echo "pulumi/bin/pulumi version: v$$(cat .pulumi/version)"; \
	else \
		curl -fsSL https://get.pulumi.com | \
			HOME=$(WORKING_DIR) sh -s -- --version "$$(cat .pulumi/version)"; \
	fi

# Compute the version of Pulumi to use by inspecting the Go dependencies of the provider.
default..pulumi/version: provider/go.mod
	@mkdir -p .pulumi
	@cd provider && go list -f "{{slice .Version 1}}" -m github.com/pulumi/pulumi/pkg/v3 | tee ../$@

.PHONY: development build build_sdks install_go_sdk install_java_sdk install_python_sdk install_sdks only_build build_dotnet build_go build_java build_nodejs build_python clean cleanup help install_dotnet_sdk install_nodejs_sdk install_plugins lint_provider provider provider_no_deps test prerequisites ci-mgmt test_provider

# Provider cross-platform build & packaging

# These targets assume that the schema-embed.json exists - it's generated by tfgen.
# We disable CGO to ensure that the binary is statically linked.
bin/linux-amd64/$(PROVIDER): TARGET := linux-amd64
bin/linux-arm64/$(PROVIDER): TARGET := linux-arm64
bin/darwin-amd64/$(PROVIDER): TARGET := darwin-amd64
bin/darwin-arm64/$(PROVIDER): TARGET := darwin-arm64
bin/windows-amd64/$(PROVIDER).exe: TARGET := windows-amd64
bin/%/$(PROVIDER) bin/%/$(PROVIDER).exe:
	@# check the TARGET is set
	test $(TARGET)
	cd provider && \
		export GOOS=$$(echo "$(TARGET)" | cut -d "-" -f 1) && \
		export GOARCH=$$(echo "$(TARGET)" | cut -d "-" -f 2) && \
		export CGO_ENABLED=0 && \
		go build -o "${WORKING_DIR}/$@" $(PULUMI_PROVIDER_BUILD_PARALLELISM) -ldflags "$(LDFLAGS)" "$(PROJECT)/$(PROVIDER_PATH)/cmd/$(PROVIDER)"

bin/$(PROVIDER)-v$(VERSION_GENERIC)-linux-amd64.tar.gz: bin/linux-amd64/$(PROVIDER)
bin/$(PROVIDER)-v$(VERSION_GENERIC)-linux-arm64.tar.gz: bin/linux-arm64/$(PROVIDER)
bin/$(PROVIDER)-v$(VERSION_GENERIC)-darwin-amd64.tar.gz: bin/darwin-amd64/$(PROVIDER)
bin/$(PROVIDER)-v$(VERSION_GENERIC)-darwin-arm64.tar.gz: bin/darwin-arm64/$(PROVIDER)
bin/$(PROVIDER)-v$(VERSION_GENERIC)-windows-amd64.tar.gz: bin/windows-amd64/$(PROVIDER).exe
bin/$(PROVIDER)-v$(VERSION_GENERIC)-%.tar.gz:
	@mkdir -p dist
	@# $< is the last dependency (the binary path from above) e.g. bin/linux-amd64/pulumi-resource-xyz
	@# $@ is the current target e.g. bin/pulumi-resource-xyz-v1.2.3-linux-amd64.tar.gz
	tar --gzip -cf $@ README.md LICENSE -C $$(dirname $<) .

provider_dist-linux-amd64: bin/$(PROVIDER)-v$(VERSION_GENERIC)-linux-amd64.tar.gz
provider_dist-linux-arm64: bin/$(PROVIDER)-v$(VERSION_GENERIC)-linux-arm64.tar.gz
provider_dist-darwin-amd64: bin/$(PROVIDER)-v$(VERSION_GENERIC)-darwin-amd64.tar.gz
provider_dist-darwin-arm64: bin/$(PROVIDER)-v$(VERSION_GENERIC)-darwin-arm64.tar.gz
provider_dist-windows-amd64: bin/$(PROVIDER)-v$(VERSION_GENERIC)-windows-amd64.tar.gz
provider_dist: provider_dist-linux-amd64 provider_dist-linux-arm64 provider_dist-darwin-amd64 provider_dist-darwin-arm64 provider_dist-windows-amd64
.PHONY: provider_dist-linux-amd64 provider_dist-linux-arm64 provider_dist-darwin-amd64 provider_dist-darwin-arm64 provider_dist-windows-amd64 provider_dist

help:
	grep '^[^.#]\+:\s\+.*#' Makefile | \
		sed "s/\(.\+\):\s*\(.*\) #\s*\(.*\)/`printf "\033[93m"`\1`printf "\033[0m"` \3 [\2]/" | \
		expand -t20


# Delegate any undefined target "foo" to its respective "default.foo" target,
# if it exists.
%:
	@$(MAKE) -f defaults.mk "default.$@"


